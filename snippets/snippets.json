{
    "createUnauthenticatedClient": {
        "prefix": "op-uc",
        "body": [
            "import { createUnauthenticatedClient } from \"@interledger/open-payments\";",
            "",
            "const client = await createUnauthenticatedClient({});"
        ],
        "description": "Creates an unauthenticated OP client"
    },
    "createAuthenticatedClient": {
        "prefix": "op-ac",
        "body": [
            "import { createAuthenticatedClient } from \"@interledger/open-payments\";",
            "",
            "const client = await createAuthenticatedClient({",
            "\tkeyId: ${1:\"<KEY_ID>\"},",
            "\tpaymentPointer: ${2:\"<PAYMENT_POINTER>\"},",
            "\tprivateKey: ${3:\"<PRIVATE_KEY>\"},",
            "});"
        ],
        "description": "Creates an authenticated OP client"
    },
    "getPaymentPointerInformation": {
        "prefix": "op-pp",
        "body": [
            "const paymentPointer = await client.paymentPointer.get({",
            "\turl: ${1:\"<PAYMENT_POINTER_URL>\"},",
            "});"
        ],
        "description": "Get payment pointer information"
    },
    "getPaymentPointerKeys": {
        "prefix": "op-pp-keys",
        "body": [
            "const paymentPointerKeys = await client.paymentPointer.getKeys({",
            "\turl: ${1:\"<PAYMENT_POINTER_URL>\"},",
            "});"
        ],
        "description": "Get payment pointer keys"
    },
    "revokeGrant": {
        "prefix": "op-grant-revoke",
        "body": [
            "await client.grant.cancel({",
            "\taccessToken: ${1:\"<CONTINUE_ACCESS_TOKEN>\"},",
            "\turl: ${2:\"<CONTINUE_URI>\"},",
            "});"
        ],
        "description": "Revoke a grant"
    },
    "requestGrant": {
        "prefix": "op-grant",
        "body": [
            "import { isPendingGrant } from \"@interledger/open-payments\";",
            "",
            "const grant = await client.grant.request(",
            "\t{",
            "\t\turl: ${1:\"<AUTH_SERVER>\"},",
            "\t},",
            "\t{",
            "\t\taccess_token: {",
            "\t\t\taccess: [",
            "\t\t\t\t{",
            "\t\t\t\t\ttype: \"quote\",",
            "\t\t\t\t\tactions: [\"read\", \"read-all\", \"create\"],",
            "\t\t\t\t},",
            "\t\t\t\t{",
            "\t\t\t\t\ttype: \"incoming-payment\",",
            "\t\t\t\t\tactions: [\"read\", \"read-all\", \"list\", \"list-all\", \"create\", \"complete\"],",
            "\t\t\t\t},",
            "\t\t\t\t{",
            "\t\t\t\t\tidentifier: ${2:\"<PAYMENT_POINTER>\"},",
            "\t\t\t\t\ttype: \"outgoing-payment\",",
            "\t\t\t\t\tactions: [\"read\", \"read-all\", \"list\", \"list-all\", \"create\"],",
            "\t\t\t\t\tlimits: {",
            "\t\t\t\t\t\tdebitAmount: {",
            "\t\t\t\t\t\t\tvalue: ${3:\"<VALUE>\"},",
            "\t\t\t\t\t\t\tassetCode: ${4:\"<ASSET_CODE>\"},",
            "\t\t\t\t\t\t\tassetScale: ${5:\"<ASSET_SCALE>\"},",
            "\t\t\t\t\t\t},",
            "\t\t\t\t\t\treceiveAmount: {",
            "\t\t\t\t\t\t\tvalue: ${6:\"<VALUE>\"},",
            "\t\t\t\t\t\t\tassetCode: ${7:\"<ASSET_CODE>\"},",
            "\t\t\t\t\t\t\tassetScale: ${8:\"<ASSET_SCALE>\"},",
            "\t\t\t\t\t\t},",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t],",
            "\t\t},",
            "\t\tinteract: {",
            "\t\t\tstart: [\"redirect\"],",
            "\t\t\tfinish: {",
            "\t\t\t\tmethod: \"redirect\",",
            "\t\t\t\turi: ${9:\"<REDIRECT_URI>\"},",
            "\t\t\t\tnonce: ${10:\"<NONCE>\"},",
            "\t\t\t},",
            "\t\t},",
            "\t},",
            ");",
            "",
            "if (!isPendingGrant(grant)) {",
            "\tthrow new Error(\"Expected interactive grant\");",
            "}"
        ],
        "description": "Request a grant"
    },
    "continueGrant": {
        "prefix": "op-grant-continue",
        "body": [
            "const grant = await client.grant.continue(",
            "\t{",
            "\t\taccessToken: ${1:\"<CONTINUE_ACCESS_TOKEN>\"},",
            "\t\turl: ${2:\"<CONTINUE_URI>\"},",
            "\t},",
            "\t{",
            "\t\tinteract_ref: ${3:\"<INTERACT_REF>\"},",
            "\t},",
            ");"
        ],
        "description": "Continue a grant"
    },
    "requestIncomingPaymentGrant": {
        "prefix": "op-grant-ip",
        "body": [
            "import { isPendingGrant } from \"@interledger/open-payments\";",
            "",
            "const grant = await client.grant.request(",
            "\t{",
            "\t\turl: ${1:\"<AUTH_SERVERL>\"},",
            "\t},",
            "\t{",
            "\t\taccess_token: {",
            "\t\t\taccess: [",
            "\t\t\t\t{",
            "\t\t\t\t\ttype: \"incoming-payment\",",
            "\t\t\t\t\tactions: [\"list\", \"list-all\", \"read\", \"read-all\", \"complete\", \"create\"],",
            "\t\t\t\t},",
            "\t\t\t],",
            "\t\t},",
            "\t},",
            ");",
            "",
            "if (isPendingGrant(grant)) {",
            "\tthrow new Error(\"Expected non-interactive grant\");",
            "}"
        ],
        "description": "Request an incoming payment grant"
    },
    "requestOutgoingPaymentGrant": {
        "prefix": "op-grant-op",
        "body": [
            "import { isPendingGrant } from \"@interledger/open-payments\";",
            "",
            "const grant = await client.grant.request(",
            "\t{",
            "\t\turl: ${1:\"<AUTH_SERVER>\"},",
            "\t},",
            "\t{",
            "\t\taccess_token: {",
            "\t\t\taccess: [",
            "\t\t\t\t{",
            "\t\t\t\t\tidentifier: ${2:\"<PAYMENT_POINTER>\"},",
            "\t\t\t\t\ttype: \"outgoing-payment\",",
            "\t\t\t\t\tactions: [\"list\", \"list-all\", \"read\", \"read-all\", \"create\"],",
            "\t\t\t\t\tlimits: {",
            "\t\t\t\t\t\tdebitAmount: {",
            "\t\t\t\t\t\t\tvalue: ${3:\"<VALUE>\"},",
            "\t\t\t\t\t\t\tassetCode: ${4:\"<ASSET_CODE>\"},",
            "\t\t\t\t\t\t\tassetScale: ${5:\"<ASSET_SCALE>\"},",
            "\t\t\t\t\t\t},",
            "\t\t\t\t\t\treceiveAmount: {",
            "\t\t\t\t\t\t\tvalue: ${6:\"<VALUE>\"},",
            "\t\t\t\t\t\t\tassetCode: ${7:\"<ASSET_CODE>\"},",
            "\t\t\t\t\t\t\tassetScale: ${8:\"<ASSET_SCALE>\"},",
            "\t\t\t\t\t\t},",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t],",
            "\t\t},",
            "\t\tinteract: {",
            "\t\t\tstart: [\"redirect\"],",
            "\t\t\tfinish: {",
            "\t\t\t\tmethod: \"redirect\",",
            "\t\t\t\turi: ${9:\"<FINISH_URI>\"},",
            "\t\t\t\tnonce: ${10:\"<NONCE>\"},",
            "\t\t\t},",
            "\t\t},",
            "\t},",
            ");",
            "",
            "if (!isPendingGrant(grant)) {",
            "\tthrow new Error(\"Expected interactive grant\");",
            "}"
        ],
        "description": "Request an outgoing payment grant"
    },
    "requestQuoteGrant": {
        "prefix": "op-grant-quote",
        "body": [
            "const grant = await client.grant.request(",
            "\t{",
            "\t\turl: ${1:\"<AUTH_SERVER>\"},",
            "\t},",
            "\t{",
            "\t\taccess_token: {",
            "\t\t\taccess: [",
            "\t\t\t\t{",
            "\t\t\t\t\ttype: \"quote\",",
            "\t\t\t\t\tactions: [\"create\", \"read\", \"read-all\"],",
            "\t\t\t\t},",
            "\t\t\t],",
            "\t\t},",
            "\t},",
            ");",
            "",
            "if (isPendingGrant(grant)) {",
            "\tthrow new Error(\"Expected non-interactive grant\");",
            "}"
        ],
        "description": "Request a quote grant"
    },
    "revokeToken": {
        "prefix": "op-token-revoke",
        "body": [
            "await client.token.revoke({",
            "\turl: ${1:\"<MANAGE_URL>\"},",
            "\taccessToken: ${2:\"<ACCESS_TOKEN>\"},",
            "});"
        ],
        "description": "Revoke a token"
    },
    "rotateToken": {
        "prefix": "op-token-rotate",
        "body": [
            "const token = await client.token.rotate({",
            "\turl: ${1:\"<MANAGE_URL>\"},",
            "\taccessToken: ${2:\"<ACCESS_TOKEN>\"},",
            "});"
        ],
        "description": "Rotate a token"
    },
    "createQuote": {
        "prefix": "op-quote-create",
        "body": [
            "const quote = await client.quote.create(",
            "\t{",
            "\t\tpaymentPointer: ${1:\"<PAYMENT_POINTER>\"},",
            "\t\taccessToken: ${2:\"<QUOTE_ACCESS_TOKEN>\"},",
            "\t},",
            "\t{",
            "\t\treceiver: ${3:\"<INCOMING_PAYMENT_URL>\"},",
            "\t},",
            ");"
        ],
        "description": "Create a quote without `receiveAmount` and `debitAmount`"
    },
    "createQuoteWithReceiveAmount": {
        "prefix": "op-quote-create-ra",
        "body": [
            "const quote = await client.quote.create(",
            "\t{",
            "\t\tpaymentPointer: ${1:\"<PAYMENT_POINTER>\"},",
            "\t\taccessToken: ${2:\"<QUOTE_ACCESS_TOKEN>\"},",
            "\t},",
            "\t{",
            "\t\treceiver: ${3:\"<INCOMING_PAYMENT_URL>\"},",
            "\t\treceiveAmount: {",
            "\t\t\tvalue: ${4:\"<VALUE>\"},",
            "\t\t\tassetCode: ${5:\"<ASSET_CODE>\"},",
            "\t\t\tassetScale: ${6:\"<ASSET_SCALE>\"},",
            "\t\t},",
            "\t},",
            ");"
        ],
        "description": "Create a quote with receive amount"
    },
    "createQuoteWithDebitAmount": {
        "prefix": "op-quote-create-da",
        "body": [
            "const quote = await client.quote.create(",
            "\t{",
            "\t\tpaymentPointer: ${1:\"<PAYMENT_POINTER>\"},",
            "\t\taccessToken: ${2:\"<QUOTE_ACCESS_TOKEN>\"},",
            "\t},",
            "\t{",
            "\t\treceiver: ${3:\"<INCOMING_PAYMENT_URL>\"},",
            "\t\tdebitAmount: {",
            "\t\t\tvalue: ${4:\"<VALUE>\"},",
            "\t\t\tassetCode: ${5:\"<ASSET_CODE>\"},",
            "\t\t\tassetScale: ${6:\"<ASSET_SCALE>\"},",
            "\t\t},",
            "\t},",
            ");"
        ],
        "description": "Create a quote with debit amount"
    },
    "getQuote": {
        "prefix": "op-quote-get",
        "body": [
            "const quote = await client.quote.get(",
            "\t{",
            "\t\turl: ${1:\"<QUOTE_URL>\"},",
            "\t\taccessToken: ${2:\"<QUOTE_ACCESS_TOKEN>\"},",
            "\t},",
            ");"
        ],
        "description": "Get a quote"
    }
}
